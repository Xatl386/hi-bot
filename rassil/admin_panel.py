"""
–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
"""
import logging
import os
from pathlib import Path
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CommandHandler, CallbackQueryHandler, MessageHandler, 
    ConversationHandler, ContextTypes, filters
)
from config import ADMIN_IDS
from database import get_db, ReminderText, Mailing, BotSettings
from mailing_system import create_mailing, send_test_mailing, send_mass_mailing
from statistics import get_statistics, export_statistics_excel

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(MAILING_TEXT, MAILING_IMAGE, MAILING_CONFIRM, 
 EDIT_REMINDER_SELECT, EDIT_REMINDER_TEXT, SET_INVITE_LINK,
 GREETING_TEXT, GREETING_MEDIA, GREETING_BUTTON_TEXT, GREETING_BUTTON_URL) = range(10)

# –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
MEDIA_DIR = Path("media")
MEDIA_DIR.mkdir(exist_ok=True)


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS


async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üì§ –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="admin_new_mailing")],
        [InlineKeyboardButton("üëã –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", callback_data="admin_edit_greeting")],
        [InlineKeyboardButton("üîó –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª", callback_data="admin_set_invite_link")],
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", callback_data="admin_edit_reminders")],
        [InlineKeyboardButton("üì• –í—ã–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (Excel)", callback_data="admin_export_stats")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    admin_text = """
üîê <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å Eldorado Trade Bot</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
üì§ <b>–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É</b> - —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
üëã <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ</b> - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
üîó <b>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É</b> - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
‚úèÔ∏è <b>–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b> - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
üì• <b>–í—ã–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É</b> - —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel
    """
    
    await update.message.reply_text(admin_text, reply_markup=reply_markup, parse_mode='HTML')


async def show_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not is_admin(user_id):
        await query.edit_message_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    stats = await get_statistics()
    
    stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>

üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {stats['total_users']}
‚úÖ <b>–ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö:</b> {stats['subscribed_users']} ({stats['subscription_rate']:.1f}%)
‚ùå <b>–ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö:</b> {stats['unsubscribed_users']}

üìÖ <b>–°–µ–≥–æ–¥–Ω—è:</b> {stats['today_users']} –Ω–æ–≤—ã—Ö
üìÖ <b>–ó–∞ –Ω–µ–¥–µ–ª—é:</b> {stats['week_users']} –Ω–æ–≤—ã—Ö
üìÖ <b>–ó–∞ –º–µ—Å—è—Ü:</b> {stats['month_users']} –Ω–æ–≤—ã—Ö

üì¨ <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
{stats.get('last_activity', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}
    """
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(stats_text, reply_markup=reply_markup, parse_mode='HTML')


async def start_new_mailing(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not is_admin(user_id):
        await query.edit_message_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return ConversationHandler.END
    
    await query.edit_message_text(
        "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: <b>–∂–∏—Ä–Ω—ã–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>, <code>–∫–æ–¥</code>\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel",
        parse_mode='HTML'
    )
    
    return MAILING_TEXT


async def receive_mailing_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏"""
    context.user_data['mailing_text'] = update.message.text
    
    keyboard = [
        [InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="mailing_no_image")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="mailing_cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "‚úÖ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
        "üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
        reply_markup=reply_markup
    )
    
    return MAILING_IMAGE


async def receive_mailing_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if update.message.photo:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        file = await context.bot.get_file(photo.file_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        filename = f"mailing_{update.effective_user.id}_{photo.file_id}.jpg"
        filepath = MEDIA_DIR / filename
        await file.download_to_drive(filepath)
        
        context.user_data['mailing_image'] = str(filepath)
        
        await update.message.reply_text("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    return await show_mailing_preview(update, context)


async def skip_mailing_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    context.user_data['mailing_image'] = None
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    return await show_mailing_preview(update, context)


async def show_mailing_preview(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏"""
    message_text = context.user_data.get('mailing_text', '')
    image_path = context.user_data.get('mailing_image')
    
    preview_text = f"""
üìã <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏</b>

<b>–¢–µ–∫—Å—Ç:</b>
{message_text}

<b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b> {'‚úÖ –î–∞' if image_path else '‚ùå –ù–µ—Ç'}
    """
    
    keyboard = [
        [InlineKeyboardButton("‚úâÔ∏è –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞", callback_data="mailing_test")],
        [InlineKeyboardButton("üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º", callback_data="mailing_send_all")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="mailing_cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if isinstance(update, Update) and update.callback_query:
        await update.callback_query.message.reply_text(
            preview_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    else:
        await update.message.reply_text(
            preview_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    
    return MAILING_CONFIRM


async def send_test_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    query = update.callback_query
    await query.answer("–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    
    user_id = query.from_user.id
    message_text = context.user_data.get('mailing_text', '')
    image_path = context.user_data.get('mailing_image')
    
    # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    mailing_id = await create_mailing(message_text, image_path, user_id)
    
    if mailing_id:
        success, message = await send_test_mailing(context, mailing_id, user_id)
        
        if success:
            await query.message.reply_text(
                "‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º", callback_data=f"mailing_send_all_{mailing_id}")],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="mailing_cancel")]
                ])
            )
        else:
            await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {message}")
            return ConversationHandler.END
    else:
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏")
        return ConversationHandler.END
    
    return MAILING_CONFIRM


async def send_mass_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∞—Å—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    query = update.callback_query
    await query.answer("–ù–∞—á–∏–Ω–∞—é –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    user_id = query.from_user.id
    message_text = context.user_data.get('mailing_text', '')
    image_path = context.user_data.get('mailing_image')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ ID —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ callback_data
    callback_data = query.data
    if '_' in callback_data:
        parts = callback_data.split('_')
        if len(parts) > 3:
            mailing_id = int(parts[-1])
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É
            mailing_id = await create_mailing(message_text, image_path, user_id)
    else:
        mailing_id = await create_mailing(message_text, image_path, user_id)
    
    if mailing_id:
        await query.message.reply_text("üì® –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        # –ü–µ—Ä–µ–¥–∞–µ–º user_id –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        success, sent_count, total_count = await send_mass_mailing(context, mailing_id, admin_id=user_id)
        
        if success:
            await query.message.reply_text(
                f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ!</b>\n\n"
                f"–ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {total_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n"
                f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏.",
                parse_mode='HTML'
            )
        else:
            await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏")
    else:
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏")
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    
    return ConversationHandler.END


async def cancel_mailing(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    query = update.callback_query
    if query:
        await query.answer()
        await query.message.reply_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    else:
        await update.message.reply_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    # –£–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image_path = context.user_data.get('mailing_image')
    if image_path and Path(image_path).exists():
        try:
            Path(image_path).unlink()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
    
    context.user_data.clear()
    return ConversationHandler.END


async def edit_reminders_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    
    if not is_admin(user_id):
        await query.edit_message_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return ConversationHandler.END
    
    keyboard = [
        [InlineKeyboardButton("‚è± –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ 3 –º–∏–Ω—É—Ç—ã", callback_data="edit_reminder_3min")],
        [InlineKeyboardButton("‚è± –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ 10 –º–∏–Ω—É—Ç", callback_data="edit_reminder_10min")],
        [InlineKeyboardButton("‚è± –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ 30 –º–∏–Ω—É—Ç", callback_data="edit_reminder_30min")],
        [InlineKeyboardButton("‚è± –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ 9 —á–∞—Å–æ–≤", callback_data="edit_reminder_9hours")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )
    
    return EDIT_REMINDER_SELECT


async def select_reminder_to_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±—Ä–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ callback_data
    reminder_type = query.data.replace('edit_', '')
    context.user_data['editing_reminder'] = reminder_type
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç
    db = get_db()
    try:
        reminder_text = db.query(ReminderText).filter_by(reminder_type=reminder_type).first()
        current_text = reminder_text.text if reminder_text else "–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
    finally:
        db.close()
    
    reminder_names = {
        'reminder_3min': '3 –º–∏–Ω—É—Ç—ã',
        'reminder_10min': '10 –º–∏–Ω—É—Ç',
        'reminder_30min': '30 –º–∏–Ω—É—Ç',
        'reminder_9hours': '9 —á–∞—Å–æ–≤'
    }
    
    await query.edit_message_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ({reminder_names.get(reminder_type, reminder_type)})</b>\n\n"
        f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n{current_text}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        parse_mode='HTML'
    )
    
    return EDIT_REMINDER_TEXT


async def save_reminder_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    reminder_type = context.user_data.get('editing_reminder')
    new_text = update.message.text
    
    db = get_db()
    try:
        reminder_text = db.query(ReminderText).filter_by(reminder_type=reminder_type).first()
        
        if reminder_text:
            reminder_text.text = new_text
            db.commit()
            
            await update.message.reply_text(
                f"‚úÖ –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è <b>{reminder_type}</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!",
                parse_mode='HTML'
            )
        else:
            await update.message.reply_text("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
    except Exception as e:
        db.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")
    finally:
        db.close()
    
    context.user_data.clear()
    return ConversationHandler.END


async def export_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ Excel"""
    query = update.callback_query
    await query.answer("–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —Ñ–∞–π–ª...")
    
    user_id = query.from_user.id
    if not is_admin(user_id):
        await query.edit_message_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    try:
        filepath = await export_statistics_excel()
        
        if filepath and Path(filepath).exists():
            with open(filepath, 'rb') as file:
                await context.bot.send_document(
                    chat_id=user_id,
                    document=file,
                    filename="statistics.xlsx",
                    caption="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞"
                )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                Path(filepath).unlink()
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")
            
            await query.message.reply_text("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        else:
            await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


async def set_invite_link_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not is_admin(user_id):
        await query.edit_message_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Å—ã–ª–∫—É
    db = get_db()
    try:
        current_link = db.query(BotSettings).filter_by(setting_key='channel_invite_link').first()
        current_value = current_link.setting_value if current_link else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    finally:
        db.close()
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = f"""üîó <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª</b>

<b>–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞:</b>
{current_value}

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª.

<b>–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É:</b>
1. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à –∫–∞–Ω–∞–ª –≤ Telegram
2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
3. –ù–∞–∂–º–∏—Ç–µ "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏"
4. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É (–∏–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é)
5. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É —Å—é–¥–∞

<b>–ü—Ä–∏–º–µ—Ä:</b>
<code>https://t.me/+abcdefghijklmnop</code>

–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"""

    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
    return SET_INVITE_LINK


async def save_invite_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return ConversationHandler.END
    
    invite_link = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏
    if not (invite_link.startswith('https://t.me/+') or invite_link.startswith('https://t.me/joinchat/')):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏!\n\n"
            "–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å:\n"
            "‚Ä¢ https://t.me/+...\n"
            "‚Ä¢ https://t.me/joinchat/...\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
        )
        return SET_INVITE_LINK
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db = get_db()
    try:
        setting = db.query(BotSettings).filter_by(setting_key='channel_invite_link').first()
        
        if setting:
            setting.setting_value = invite_link
        else:
            setting = BotSettings(
                setting_key='channel_invite_link',
                setting_value=invite_link
            )
            db.add(setting)
        
        db.commit()
        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∞: {invite_link}")
        
        keyboard = [[InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"‚úÖ <b>–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!</b>\n\n"
            f"<b>–ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞:</b>\n{invite_link}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –ø–æ–ª—É—á–∞—Ç—å —ç—Ç—É —Å—Å—ã–ª–∫—É –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ '–û–ö üî•'",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        return ConversationHandler.END
        
    except Exception as e:
        db.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END
    finally:
        db.close()


async def cancel_set_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Å—ã–ª–∫–∏"""
    if update.callback_query:
        query = update.callback_query
        await query.answer()
    
    keyboard = [[InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            "‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            "‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=reply_markup
        )
    
    return ConversationHandler.END


async def admin_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üì§ –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="admin_new_mailing")],
        [InlineKeyboardButton("üëã –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", callback_data="admin_edit_greeting")],
        [InlineKeyboardButton("üîó –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª", callback_data="admin_set_invite_link")],
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", callback_data="admin_edit_reminders")],
        [InlineKeyboardButton("üì• –í—ã–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (Excel)", callback_data="admin_export_stats")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    admin_text = """
üîê <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å Eldorado Trade Bot</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    
    await query.edit_message_text(admin_text, reply_markup=reply_markup, parse_mode='HTML')
    return ConversationHandler.END


# ============================================================================
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –ü–†–ò–í–ï–¢–°–¢–í–ï–ù–ù–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø
# ============================================================================

async def edit_greeting_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not is_admin(user_id):
        await query.edit_message_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    db = get_db()
    try:
        greeting_text = db.query(BotSettings).filter_by(setting_key='greeting_message').first()
        button_text = db.query(BotSettings).filter_by(setting_key='greeting_button_text').first()
        button_url = db.query(BotSettings).filter_by(setting_key='greeting_button_url').first()
        media_paths = db.query(BotSettings).filter_by(setting_key='greeting_media_paths').first()
        
        current_text = greeting_text.setting_value if greeting_text else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        current_button = f"{button_text.setting_value} -> {button_url.setting_value}" if (button_text and button_url) else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        current_media = "–î–∞" if (media_paths and media_paths.setting_value) else "–ù–µ—Ç"
        
    finally:
        db.close()
    
    keyboard = [
        [InlineKeyboardButton("‚úçÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="greeting_edit_text")],
        [InlineKeyboardButton("üñºÔ∏è –î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞", callback_data="greeting_add_media")],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–µ–¥–∏–∞", callback_data="greeting_delete_media")],
        [InlineKeyboardButton("üîò –ò–∑–º–µ–Ω–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data="greeting_edit_button")],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data="greeting_delete_button")],
        [InlineKeyboardButton("üîç –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="greeting_preview")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = f"""üëã <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è</b>

<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>

<b>–¢–µ–∫—Å—Ç:</b>
{current_text[:100]}{"..." if len(current_text) > 100 else ""}

<b>–ö–Ω–æ–ø–∫–∞:</b> {current_button}
<b>–ú–µ–¥–∏–∞:</b> {current_media}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')


async def greeting_edit_text_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not is_admin(user_id):
        await query.edit_message_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç
    db = get_db()
    try:
        greeting_text = db.query(BotSettings).filter_by(setting_key='greeting_message').first()
        current_text = greeting_text.setting_value if greeting_text else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    finally:
        db.close()
    
    await query.edit_message_text(
        f"‚úçÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è</b>\n\n"
        f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n{current_text}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: <b>–∂–∏—Ä–Ω—ã–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>, <code>–∫–æ–¥</code>\n\n"
        f"–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        parse_mode='HTML'
    )
    
    return GREETING_TEXT


async def greeting_save_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return ConversationHandler.END
    
    new_text = update.message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    db = get_db()
    try:
        setting = db.query(BotSettings).filter_by(setting_key='greeting_message').first()
        
        if setting:
            setting.setting_value = new_text
        else:
            setting = BotSettings(setting_key='greeting_message', setting_value=new_text)
            db.add(setting)
        
        db.commit()
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user_id}")
        
        keyboard = [[InlineKeyboardButton("üîô –í –º–µ–Ω—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π", callback_data="admin_edit_greeting")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚úÖ <b>–¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!</b>",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        return ConversationHandler.END
        
    except Exception as e:
        db.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞")
        return ConversationHandler.END
    finally:
        db.close()


async def greeting_add_media_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not is_admin(user_id):
        await query.edit_message_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return ConversationHandler.END
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Ç–µ–π –∫ –º–µ–¥–∏–∞
    context.user_data['greeting_media_files'] = []
    
    keyboard = [[InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="greeting_media_done")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üñºÔ∏è <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞ –∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—é</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–¥–æ 10 —à—Ç—É–∫).\n"
        "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞–∫ —Ñ–æ—Ç–æ (—Å–æ —Å–∂–∞—Ç–∏–µ–º), —Ç–∞–∫ –∏ —Ñ–∞–π–ª—ã (–±–µ–∑ —Å–∂–∞—Ç–∏—è).\n\n"
        "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–≤–µ—Ä—à–∏—Ç—å' –Ω–∏–∂–µ.",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )
    
    return GREETING_MEDIA


async def greeting_receive_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∏—Ç—å –º–µ–¥–∏–∞-—Ñ–∞–π–ª"""
    user_id = update.effective_user.id
    if not is_admin(user_id):
        return GREETING_MEDIA
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
    if update.message.photo:
        photo = update.message.photo[-1]
        file = await context.bot.get_file(photo.file_id)
        filename = f"greeting_{user_id}_{photo.file_id}.jpg"
    elif update.message.document:
        document = update.message.document
        file = await context.bot.get_file(document.file_id)
        filename = f"greeting_{user_id}_{document.file_id}_{document.file_name}"
    else:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        return GREETING_MEDIA
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    filepath = MEDIA_DIR / filename
    await file.download_to_drive(filepath)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –≤ —Å–ø–∏—Å–æ–∫
    if 'greeting_media_files' not in context.user_data:
        context.user_data['greeting_media_files'] = []
    
    context.user_data['greeting_media_files'].append(str(filepath))
    
    count = len(context.user_data['greeting_media_files'])
    
    keyboard = [[InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="greeting_media_done")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {count} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
        f"–ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ (–≤—Å–µ–≥–æ –¥–æ 10) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å'.",
        reply_markup=reply_markup
    )
    
    return GREETING_MEDIA


async def greeting_media_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not is_admin(user_id):
        await query.edit_message_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return ConversationHandler.END
    
    media_files = context.user_data.get('greeting_media_files', [])
    
    if not media_files:
        await query.edit_message_text("‚ùå –ù–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –≤ –ë–î (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
    db = get_db()
    try:
        media_paths_str = ','.join(media_files)
        
        setting = db.query(BotSettings).filter_by(setting_key='greeting_media_paths').first()
        
        if setting:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
            if setting.setting_value:
                old_paths = setting.setting_value.split(',')
                for old_path in old_paths:
                    old_path = old_path.strip()
                    if old_path and Path(old_path).exists():
                        try:
                            Path(old_path).unlink()
                        except Exception as e:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª {old_path}: {e}")
            
            setting.setting_value = media_paths_str
        else:
            setting = BotSettings(setting_key='greeting_media_paths', setting_value=media_paths_str)
            db.add(setting)
        
        db.commit()
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã –º–µ–¥–∏–∞-—Ñ–∞–π–ª—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {len(media_files)} —Ñ–∞–π–ª–æ–≤")
        
        keyboard = [[InlineKeyboardButton("üîô –í –º–µ–Ω—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π", callback_data="admin_edit_greeting")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.reply_text(
            f"‚úÖ <b>–ú–µ–¥–∏–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!</b>\n\n"
            f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(media_files)}",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        context.user_data.clear()
        return ConversationHandler.END
        
    except Exception as e:
        db.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–µ–¥–∏–∞: {e}")
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–µ–¥–∏–∞")
        return ConversationHandler.END
    finally:
        db.close()


async def greeting_delete_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –º–µ–¥–∏–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not is_admin(user_id):
        await query.edit_message_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    db = get_db()
    try:
        setting = db.query(BotSettings).filter_by(setting_key='greeting_media_paths').first()
        
        if setting and setting.setting_value:
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã
            paths = setting.setting_value.split(',')
            for path in paths:
                path = path.strip()
                if path and Path(path).exists():
                    try:
                        Path(path).unlink()
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {path}: {e}")
            
            # –û—á–∏—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ë–î
            setting.setting_value = None
            db.commit()
            
            logger.info(f"–£–¥–∞–ª–µ–Ω—ã –º–µ–¥–∏–∞-—Ñ–∞–π–ª—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è")
            
            keyboard = [[InlineKeyboardButton("üîô –í –º–µ–Ω—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π", callback_data="admin_edit_greeting")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.reply_text(
                "‚úÖ <b>–í—Å–µ –º–µ–¥–∏–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!</b>",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        else:
            await query.edit_message_text("‚ÑπÔ∏è –ú–µ–¥–∏–∞ –Ω–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
            
    except Exception as e:
        db.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ–¥–∏–∞: {e}")
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ–¥–∏–∞")
    finally:
        db.close()


async def greeting_edit_button_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not is_admin(user_id):
        await query.edit_message_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return ConversationHandler.END
    
    await query.edit_message_text(
        "üîò <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏.\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        parse_mode='HTML'
    )
    
    return GREETING_BUTTON_TEXT


async def greeting_save_button_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏"""
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return ConversationHandler.END
    
    button_text = update.message.text
    context.user_data['greeting_button_text'] = button_text
    
    await update.message.reply_text(
        f"‚úÖ –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏: <b>{button_text}</b>\n\n"
        f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ URL –¥–ª—è –∫–Ω–æ–ø–∫–∏\n"
        f"(–Ω–∞–ø—Ä–∏–º–µ—Ä: https://t.me/your_channel)\n\n"
        f"–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        parse_mode='HTML'
    )
    
    return GREETING_BUTTON_URL


async def greeting_save_button_url(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å URL –∫–Ω–æ–ø–∫–∏"""
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return ConversationHandler.END
    
    button_url = update.message.text.strip()
    button_text = context.user_data.get('greeting_button_text')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç URL
    if not (button_url.startswith('http://') or button_url.startswith('https://')):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL!\n\n"
            "URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
        )
        return GREETING_BUTTON_URL
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    db = get_db()
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        text_setting = db.query(BotSettings).filter_by(setting_key='greeting_button_text').first()
        if text_setting:
            text_setting.setting_value = button_text
        else:
            text_setting = BotSettings(setting_key='greeting_button_text', setting_value=button_text)
            db.add(text_setting)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –∫–Ω–æ–ø–∫–∏
        url_setting = db.query(BotSettings).filter_by(setting_key='greeting_button_url').first()
        if url_setting:
            url_setting.setting_value = button_url
        else:
            url_setting = BotSettings(setting_key='greeting_button_url', setting_value=button_url)
            db.add(url_setting)
        
        db.commit()
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {button_text} -> {button_url}")
        
        keyboard = [[InlineKeyboardButton("üîô –í –º–µ–Ω—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π", callback_data="admin_edit_greeting")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"‚úÖ <b>–ö–Ω–æ–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
            f"<b>–¢–µ–∫—Å—Ç:</b> {button_text}\n"
            f"<b>URL:</b> {button_url}",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        context.user_data.clear()
        return ConversationHandler.END
        
    except Exception as e:
        db.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏")
        return ConversationHandler.END
    finally:
        db.close()


async def greeting_delete_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not is_admin(user_id):
        await query.edit_message_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    db = get_db()
    try:
        text_setting = db.query(BotSettings).filter_by(setting_key='greeting_button_text').first()
        url_setting = db.query(BotSettings).filter_by(setting_key='greeting_button_url').first()
        
        if text_setting:
            text_setting.setting_value = None
        if url_setting:
            url_setting.setting_value = None
        
        db.commit()
        logger.info("–£–¥–∞–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è")
        
        keyboard = [[InlineKeyboardButton("üîô –í –º–µ–Ω—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π", callback_data="admin_edit_greeting")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.reply_text(
            "‚úÖ <b>–ö–Ω–æ–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!</b>",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
    except Exception as e:
        db.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏: {e}")
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏")
    finally:
        db.close()


async def greeting_preview(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
    query = update.callback_query
    await query.answer("–û—Ç–ø—Ä–∞–≤–ª—è—é –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä...")
    
    user_id = query.from_user.id
    if not is_admin(user_id):
        await query.edit_message_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    from join_request_handler import send_greeting_message
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω—É
    try:
        await send_greeting_message(context, user_id)
        await query.message.reply_text("‚úÖ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞")


async def cancel_greeting_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
    if update.callback_query:
        query = update.callback_query
        await query.answer()
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if 'greeting_media_files' in context.user_data:
        for filepath in context.user_data['greeting_media_files']:
            if Path(filepath).exists():
                try:
                    Path(filepath).unlink()
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {filepath}: {e}")
    
    keyboard = [[InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=reply_markup
        )
    
    context.user_data.clear()
    return ConversationHandler.END


def setup_admin_handlers(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    application.add_handler(CommandHandler("admin", admin_command))
    application.add_handler(CallbackQueryHandler(show_statistics, pattern="^admin_stats$"))
    application.add_handler(CallbackQueryHandler(export_statistics, pattern="^admin_export_stats$"))
    
    # –ü—Ä–æ—Å—Ç—ã–µ callback –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–µ–¥–∏–∞/–∫–Ω–æ–ø–∫–∏ (–Ω–µ —Ç—Ä–µ–±—É—é—Ç conversation)
    application.add_handler(CallbackQueryHandler(greeting_delete_media, pattern="^greeting_delete_media$"))
    application.add_handler(CallbackQueryHandler(greeting_delete_button, pattern="^greeting_delete_button$"))
    application.add_handler(CallbackQueryHandler(greeting_preview, pattern="^greeting_preview$"))
    
    # Conversation handler –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
    mailing_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_new_mailing, pattern="^admin_new_mailing$")],
        states={
            MAILING_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_mailing_text)],
            MAILING_IMAGE: [
                MessageHandler(filters.PHOTO, receive_mailing_image),
                CallbackQueryHandler(skip_mailing_image, pattern="^mailing_no_image$"),
                CallbackQueryHandler(cancel_mailing, pattern="^mailing_cancel$")
            ],
            MAILING_CONFIRM: [
                CallbackQueryHandler(send_test_message, pattern="^mailing_test$"),
                CallbackQueryHandler(send_mass_message, pattern="^mailing_send_all"),
                CallbackQueryHandler(cancel_mailing, pattern="^mailing_cancel$")
            ]
        },
        fallbacks=[
            CommandHandler("cancel", cancel_mailing),
            CallbackQueryHandler(cancel_mailing, pattern="^mailing_cancel$")
        ],
        per_user=True,
        per_chat=True,
        name="mailing_conversation"
    )
    application.add_handler(mailing_conv)
    
    # Conversation handler –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    reminder_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(edit_reminders_menu, pattern="^admin_edit_reminders$")],
        states={
            EDIT_REMINDER_SELECT: [
                CallbackQueryHandler(select_reminder_to_edit, pattern="^edit_reminder_"),
                CallbackQueryHandler(admin_back, pattern="^admin_back$")
            ],
            EDIT_REMINDER_TEXT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, save_reminder_text)
            ]
        },
        fallbacks=[
            CommandHandler("cancel", cancel_mailing),
            CallbackQueryHandler(admin_back, pattern="^admin_back$")
        ],
        per_user=True,
        per_chat=True,
        name="reminder_conversation"
    )
    application.add_handler(reminder_conv)
    
    # Conversation handler –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∏
    invite_link_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(set_invite_link_start, pattern="^admin_set_invite_link$")],
        states={
            SET_INVITE_LINK: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, save_invite_link)
            ]
        },
        fallbacks=[
            CommandHandler("cancel", cancel_set_link),
            CallbackQueryHandler(admin_back, pattern="^admin_back$")
        ],
        per_user=True,
        per_chat=True,
        name="invite_link_conversation"
    )
    application.add_handler(invite_link_conv)
    
    # Conversation handler –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    greeting_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(edit_greeting_menu, pattern="^admin_edit_greeting$")],
        states={
            GREETING_TEXT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, greeting_save_text)
            ],
            GREETING_MEDIA: [
                MessageHandler(filters.PHOTO, greeting_receive_media),
                MessageHandler(filters.Document.IMAGE, greeting_receive_media),
                CallbackQueryHandler(greeting_media_done, pattern="^greeting_media_done$")
            ],
            GREETING_BUTTON_TEXT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, greeting_save_button_text)
            ],
            GREETING_BUTTON_URL: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, greeting_save_button_url)
            ]
        },
        fallbacks=[
            CommandHandler("cancel", cancel_greeting_edit),
            CallbackQueryHandler(admin_back, pattern="^admin_back$")
        ],
        per_user=True,
        per_chat=True,
        name="greeting_conversation",
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ entry_points –¥–ª—è –ø–æ–¥–º–µ–Ω—é
        map_to_parent={
            ConversationHandler.END: ConversationHandler.END
        }
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ entry points –¥–ª—è greeting conversation
    greeting_conv.entry_points.extend([
        CallbackQueryHandler(greeting_edit_text_start, pattern="^greeting_edit_text$"),
        CallbackQueryHandler(greeting_add_media_start, pattern="^greeting_add_media$"),
        CallbackQueryHandler(greeting_edit_button_start, pattern="^greeting_edit_button$")
    ])
    
    application.add_handler(greeting_conv)
    
    # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ admin_back (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–û–°–õ–ï –≤—Å–µ—Ö ConversationHandler'–æ–≤)
    # –°—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–º conversation
    application.add_handler(CallbackQueryHandler(admin_back, pattern="^admin_back$"))
    
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")


